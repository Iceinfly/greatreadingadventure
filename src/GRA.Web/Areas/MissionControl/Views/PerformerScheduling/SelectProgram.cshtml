@model GRA.Controllers.ViewModel.MissionControl.PerformerScheduling.SelectProgramViewModel

@section styles {
    <link rel="stylesheet" href="/css/performerregistration.min.css" />
}

<div class="row">
    <div class="col-12">
        <h1>Select Program</h1>
    </div>
</div>

<div class="row">
    <div class="col-12 col-lg-8 offset-lg-2">
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-12 col-sm-6 col-md-4">
                        <strong>Branch</strong>
                        <div>@Model.BranchSelection.Branch.Name</div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4">
                        <strong>Age Group</strong>
                        <div>@Model.BranchSelection.AgeGroup.Name</div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4">
                        <strong>Program</strong>
                        <div>@Model.BranchSelection.Program.Title</div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4">
                        <strong>Program Length</strong>
                        <div>
                            @Model.BranchSelection.Program.ProgramLengthMinutes minutes
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4">
                        <strong>Set-up Time</strong>
                        <div>@Model.BranchSelection.Program.SetupTimeMinutes minutes</div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4">
                        <strong>Breakdown Time</strong>
                        <div>
                            @Model.BranchSelection.Program.BreakdownTimeMinutes minutes
                        </div>
                    </div>
                    @if (Model.BranchSelection.BackToBackProgram)
                    {
                        <div class="col-12 col-sm-6 col-md-4">
                            <strong>Back to Back Program</strong>
                            <div>Yes</div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-4">
                            <strong>Back to Back Time</strong>
                            <div>
                                @Model.BranchSelection.Program.BackToBackMinutes minutes
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@{
    int count = 0;
    int openDivs = 0;
}
@for (var calendarMonth = new DateTime(Model.Settings.ScheduleStartDate.Value.Year, Model.Settings.ScheduleStartDate.Value.Month, 1); calendarMonth <= Model.Settings.ScheduleEndDate.Value; calendarMonth = calendarMonth.AddMonths(1))
{
    var firstDayOfWeek = (int)calendarMonth.DayOfWeek;
    var daysInMonth = DateTime.DaysInMonth(calendarMonth.Year, calendarMonth.Month);
    var monthDateSelectors = (firstDayOfWeek + daysInMonth > 35 ? 42 : 35);

    @if (count % 3 == 0)
    {
        openDivs++;
        @:<div class="row mb-3">
    }
    <div class="col-12 col-md-4">
        <table class="table table-bordered text-center" style="table-layout:fixed;">
            <thead>
                <tr>
                    <td colspan="7" class="calendar-cell">
                        <div class="option">
                            @calendarMonth.ToString("MMMM")
                            @(Model.Settings.ScheduleStartDate.Value.Year != Model.Settings.ScheduleEndDate.Value.Year ? calendarMonth.ToString("yyyy") : "")
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="calendar-cell"><div class="option">Sun</div></td>
                    <td class="calendar-cell"><div class="option">Mon</div></td>
                    <td class="calendar-cell"><div class="option">Tue</div></td>
                    <td class="calendar-cell"><div class="option">Wed</div></td>
                    <td class="calendar-cell"><div class="option">Thu</div></td>
                    <td class="calendar-cell"><div class="option">Fri</div></td>
                    <td class="calendar-cell"><div class="option">Sat</div></td>
                </tr>
            </thead>
            <tbody>
                @for (int date = 1 - firstDayOfWeek; date <= (monthDateSelectors - firstDayOfWeek); date++)
                {
                    var outOfRange = (calendarMonth.Month == Model.Settings.ScheduleStartDate.Value.Month && calendarMonth.Year == Model.Settings.ScheduleStartDate.Value.Year && date < Model.Settings.ScheduleStartDate.Value.Day
                        || calendarMonth.Month == Model.Settings.ScheduleEndDate.Value.Month && calendarMonth.Year == Model.Settings.ScheduleEndDate.Value.Year && date > Model.Settings.ScheduleEndDate.Value.Day);
                    var hideDate = date < 1 || date > daysInMonth;
                    var blackoutDate = Model.BlackoutDates.FirstOrDefault(_ => _.Date.Day == date && _.Date.Month == calendarMonth.Month && _.Date.Year == calendarMonth.Year);
                    var scheduleDate = Model.ScheduleDates.FirstOrDefault(_ => _.Date.Day == date && _.Date.Month == calendarMonth.Month && _.Date.Year == calendarMonth.Year);
                    var bookedDate = Model.BookedDates.FirstOrDefault(_ => _.Day == date && _.Month == calendarMonth.Month && _.Year == calendarMonth.Year);

                    if ((date + firstDayOfWeek) % 7 == 1)
                    {
                        @:<tr>
                    }
                    <td class="@(outOfRange || hideDate || blackoutDate != null || (scheduleDate != null && scheduleDate?.StartTime == null) ? "unselectable" : "selectable")@(blackoutDate != null ? " blackout" : "")@(outOfRange ? " out-of-range" : "")" data-year="@calendarMonth.Year" data-month="@calendarMonth.Month" data-date="@date" data-start="@(scheduleDate?.StartTime?.ToShortTimeString() ?? "8:00 AM")" asp-schedule="@scheduleDate" asp-booked="@bookedDate" asp-booking="true">
                        <div class="option" 
                            data-bs-toggle="tooltip" 
                            data-bs-placement="top" 
                            title="@blackoutDate?.Reason">
                            @Html.Raw(hideDate ? "&nbsp;" : date.ToString())
                        </div>
                    </td>
                    if ((date + firstDayOfWeek) % 7 == 0)
                    {
                        @:</tr>
                    }
                }
            </tbody>
        </table>
    </div>
    if (count % 3 == 2)
    {
        openDivs--;
        @:</div>
    }
    { count++; }
}
@for(; openDivs > 0; openDivs--)
{
    @Html.Raw("</div>");
}

<div class="card">
    <div class="card-header">Select This Date and Time</div>
    <div class="card-body">
        <div class="row">
            <div class="col-12 col-lg-6">
                <div id="daySchedule"><ul><li>Select a date to see available times.</li></ul></div>
                <div id="programDurationContainer" class="d-none">
                    <ul>
                    <li>Total time (including setup/teardown): <span id="programDuration"></span></li>
                    </ul>
                </div>
            </div>
            <div class="col-12 col-lg-6">
                Select a start time:
                <div class="date" id="pickerStart">
                    <input id="startTime" 
                        class="form-control" 
                        type="time" 
                        disabled />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <form class="card-body" id="onSiteContactInfo">
                <div class="mb-1 mt-3">
                    <label>
                        <strong>
                        Please provide contact information for someone the performer can 
                        contact the day of the performance.
                        </strong>
                    </label>
                </div>
                <div class="mb-1">
                    <label for="OnSiteContactName">Name</label>
                    <div class="input-with-validation">
                        <input name="OnSiteContactName" 
                            asp-for="BranchSelection.OnSiteContactName" 
                            type="text" 
                            class="form-control" 
                            required />
                        <div class="validation"></div>
                    </div>
                    <span class="text-danger"></span>
                </div>
                <div class="mb-1">
                    <label for="OnSiteContactEmail">Email</label>
                    <div class="input-with-validation">
                        <input name="OnSiteContactEmail" 
                            asp-for="BranchSelection.OnSiteContactEmail" 
                            type="email"
                            pattern=".+&commat;.+\..+"
                            class="form-control"
                            required />
                        <div class="validation"></div>
                    </div>
                    <span class="text-danger"></span>
                </div class="mb-3">
                <div>
                    <label for="OnSiteContactPhone">
                        Phone (numbers only)
                        </label>
                    <div class="input-with-validation">
                        <input name="OnSiteContactPhone" 
                            asp-for="BranchSelection.OnSiteContactPhone" 
                            type="tel" 
                            pattern="[0-9]{10}" 
                            class="form-control" 
                            required />
                        <div class="validation"></div>
                    </div>
                    <span class="text-danger"></span>
                </div>
            </form>
            </div>
        </div>
    </div>
    <div class="card-footer d-flex justify-content-end align-content-middle">
        <div id="checkAlert" class="alert d-none mb-0 py-1"></div>
        <div class="flex-grow-1"></div>
        <div>
            <a button-spinner
                class="btn btn-outline-dark"
                disabled
                id="checkTime">Verify time</a>
            <button button-spinner
                    class="btn btn-outline-success" 
                    disabled
                    id="scheduleProgram"
                    type="button">Schedule Program</button>
        </div>
    </div>
</div>

<form asp-action="@nameof(PerformerSchedulingController.ScheduleProgram)" 
    id="branchSelectionForm"
    method="post"
    role="form" 
    hidden="hidden">
    <input name="AgeGroupId" asp-for="BranchSelection.AgeGroupId" type="hidden" />
    <input name="BackToBackProgram" asp-for="BranchSelection.BackToBackProgram" type="hidden" />
    <input name="BranchId" asp-for="BranchSelection.BranchId" type="hidden" />
    <input name="ProgramId" asp-for="BranchSelection.ProgramId" type="hidden" />
    <input name="RequestedStartTime" asp-for="BranchSelection.RequestedStartTime" type="hidden" />
</form>

@section Scripts {
    <script>
        var backToBack = @Model.BranchSelection.BackToBackProgram.ToString().ToLower();
        var backToBackMinutes =  @Model.BranchSelection.Program.BackToBackMinutes;
        var breakdownTimeMinutes = @Model.BranchSelection.Program.BreakdownTimeMinutes;
        var checkTimeUrl = "@Url.Action(nameof(PerformerSchedulingController.CheckProgramTimeAvailability))";
        var dayScheduleUrl = "@Url.Action(nameof(PerformerSchedulingController.GetPerformerDaySchedule))";
        var onSiteFieldsValid = false;
        var programLengthMinutes = @Model.BranchSelection.Program.ProgramLengthMinutes;
        var scheduleBranchProgramUrl = "@Url.Action(nameof(PerformerSchedulingController.ScheduleProgram))";
        var selectedDate;
        var selectedTimeValid = false;
        var setupTimeMinutes = @Model.BranchSelection.Program.SetupTimeMinutes;
        var showOnSiteWarnings = false;
        var startDateTime;
        var startTime;
        var reverifyTime = false;

        function validateContactFields() {
            let fieldsValid = true;
            document.querySelectorAll("#onSiteContactInfo input").forEach(function (input) {
                if (!input.checkValidity()) {
                    console.info("Validity failed for %o", input)
                    if (showOnSiteWarnings) { 
                        input.parentNode.parentNode.querySelector("span").innerText = `Please enter ${input.parentNode.parentNode.querySelector("label").innerText.toLowerCase()}.`;
                    }
                    fieldsValid = false;
                } else {
                    input.parentNode.parentNode.querySelector("span").innerText = "";
                }
            });
            onSiteFieldsValid = fieldsValid;
            if (fieldsValid && reverifyTime) {
                reverifyTime = false;
                validateSelectedTime();
            }
        }

        async function validateSelectedTime() {
            $("#checkAlert")
                .addClass('alert-info')
                .removeClass('alert-danger alert-success alert-warning')
                .html("<span class=\"fas fa-spinner fa-pulse fa-fw\"></span>")
            startDateTime = selectedDate + "T" + document.getElementById("startTime").value;
            return $.getJSON(checkTimeUrl, { programId: "@Model.BranchSelection.ProgramId", dateTime: startDateTime, backToBack: backToBack }, function (response) {
                let checkAlert = $("#checkAlert");
                checkAlert.removeClass("d-none").removeClass("alert-info");
                if (response.success == true) {
                    selectedTimeValid = true;
                    if (response.message != null) {
                        checkAlert.addClass("alert-warning").text(response.message);
                    }
                    else {
                        validateContactFields();
                        if (onSiteFieldsValid) {
                            checkAlert.addClass("alert-success").text("The performer is available at that time.");
                        }
                        else {
                            reverifyTime = true;
                            checkAlert.addClass("alert-warning").text("The performer is available, please provide contact information.");
                        }
                    }
                }
                else {
                    checkAlert.addClass("alert-danger").text(response.message);
                }
            });
        }

        function enableOrDisableSubmit() {
            if (onSiteFieldsValid && selectedTimeValid) {
                $("#scheduleProgram").prop("disabled", false);
            } else {
                $("#scheduleProgram").prop("disabled", true);
            }
        }

        $(".selectable").on("click", function () {
            let clickedDate = $(this).data("year") + "-" + $(this).data("month") + "-" + $(this).data("date");
            if (clickedDate === selectedDate) return;

            selectedDate = null;
            selectedTimeValid = false;
            enableOrDisableSubmit();
            $("#programDuration").text("");
            $("#programDurationContainer").addClass("d-none");
            
            $(".selected-date").removeClass("selected-date");
            $(this).children().addClass("selected-date");
            selectedDate = clickedDate;
            startTime = $(this).data("start");

            $("#checkAlert").addClass("d-none");
            $.get(dayScheduleUrl, { performerId: "@Model.BranchSelection.Program.PerformerId", date: selectedDate }, function (response) {
                $("#daySchedule").html(response);
                $("#startTime").val("").prop("disabled", false);
                $("#checkTime").prop("disabled", true);
            });
        });

        $("#startTime").on("change", function (e) {
            let scheduleStartTime = new Date(selectedDate + ' ' + e.currentTarget.value);
            if (scheduleStartTime instanceof Date && !isNaN(scheduleStartTime)) {
                $("#checkTime").prop("disabled", false);
                let scheduleEndTime = new Date(scheduleStartTime);

                scheduleStartTime.setMinutes(scheduleStartTime.getMinutes() - setupTimeMinutes);

                let endTimeMinutes = programLengthMinutes + breakdownTimeMinutes;
                if (backToBack == true) {
                    endTimeMinutes += programLengthMinutes + backToBackMinutes;
                }
                scheduleEndTime.setMinutes(scheduleEndTime.getMinutes() + endTimeMinutes);

                $("#programDuration").text(scheduleStartTime.toLocaleTimeString() 
                    + " – " 
                    + scheduleEndTime.toLocaleTimeString());
                $("#programDurationContainer").removeClass("d-none");

                $("#checkTime").prop("disabled", true);
                validateSelectedTime()
                    .then(function () {
                        showOnSiteWarnings = true;
                        validateContactFields();
                        enableOrDisableSubmit();
                    });
            }
            else {
                $("#programDuration").text("");
                $("#programDurationContainer").addClass("d-none");
                $("#checkTime").prop("disabled", true);
            }
            $("#checkAlert").addClass("d-none");
            enableOrDisableSubmit();
        });

        $("#checkTime").on("click", async function () {
            $("#checkTime").prop("disabled", true);
            validateSelectedTime()
                .then(function () {
                    showOnSiteWarnings = true;
                    validateContactFields();
                    enableOrDisableSubmit();
            })
        });

        $("#scheduleProgram").on("click", function () {
            $("#BranchSelection_RequestedStartTime").val(startDateTime);
            let data = $("#branchSelectionForm").serializeArray().concat($("#onSiteContactInfo").serializeArray()).reduce(function (m, o) { m[o.name] = o.value; return m; }, {})
            $.post(scheduleBranchProgramUrl, { branchSelection: data }, function (response) {
                if (response.success) {
                    window.location.href = "@Url.Action(nameof(PerformerSchedulingController.Program), new { id = Model.BranchSelection.ProgramId})";
                }
                else {
                    $("#checkAlert").addClass("d-none");
                    enableOrDisableSubmit();
                    ResetSpinners();
                    alert(response.message);
                }
            });
        });

        document.querySelectorAll("#onSiteContactInfo input").forEach(function (input) {
            input.addEventListener("input", function (e) {
                validateContactFields();
                enableOrDisableSubmit();
            })
        });
    </script>
}
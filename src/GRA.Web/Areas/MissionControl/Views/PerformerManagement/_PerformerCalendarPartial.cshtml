@model GRA.Controllers.ViewModel.MissionControl.PerformerManagement.PerformerCalendarViewModel

<div class="row">
    <div class="col-12 fs-5 pb-3">
        @Model.BranchSelection.Branch.Name
        <a href="https://www.google.com/maps/search/@Model.BranchSelection.Branch.Address" 
            target="_blank"><span class="far fa-map fa-fw"></span></a>
        &ndash; 
        Scheduled at @Model.BranchSelection.RequestedStartTime.ToShortTimeString()@(Model.BranchSelection.BackToBackProgram ? $" & {Model.BranchSelection.RequestedStartTime.AddMinutes(Model.BranchSelection.Program.ProgramLengthMinutes + Model.BranchSelection.Program.BackToBackMinutes).ToShortTimeString()}" : ""): @Model.BranchSelection.Program.Title
    </div>
</div>

<div class="row">
    <div class="col-12">
        @{int count = 0;}
        @for (var calendarMonth = new DateTime(Model.Settings.ScheduleStartDate.Value.Year, Model.Settings.ScheduleStartDate.Value.Month, 1); calendarMonth <= Model.Settings.ScheduleEndDate.Value; calendarMonth = calendarMonth.AddMonths(1))
        {
            var firstDayOfWeek = (int)calendarMonth.DayOfWeek;
            var daysInMonth = DateTime.DaysInMonth(calendarMonth.Year, calendarMonth.Month);
            var monthDateSelectors = (firstDayOfWeek + daysInMonth > 35 ? 42 : 35);

            @if (count % 3 == 0)
            {
                @Html.Raw("<div class=\"row\">");
            }
            <div class="col-12 col-lg-4">
                <table class="table table-bordered text-center" style="table-layout:fixed;">
                    <thead>
                        <tr>
                            <td colspan="7" class="calendar-cell">
                                <div class="option">
                                    @calendarMonth.ToString("MMMM")
                                    @(Model.Settings.ScheduleStartDate.Value.Year != Model.Settings.ScheduleEndDate.Value.Year ? calendarMonth.ToString("yyyy") : "")
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td class="calendar-cell"><div class="option">Sun</div></td>
                            <td class="calendar-cell"><div class="option">Mon</div></td>
                            <td class="calendar-cell"><div class="option">Tue</div></td>
                            <td class="calendar-cell"><div class="option">Wed</div></td>
                            <td class="calendar-cell"><div class="option">Thu</div></td>
                            <td class="calendar-cell"><div class="option">Fri</div></td>
                            <td class="calendar-cell"><div class="option">Sat</div></td>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int date = 1 - firstDayOfWeek; date <= (monthDateSelectors - firstDayOfWeek); date++)
                        {
                            var outOfRange = (calendarMonth.Month == Model.Settings.ScheduleStartDate.Value.Month && calendarMonth.Year == Model.Settings.ScheduleStartDate.Value.Year && date < Model.Settings.ScheduleStartDate.Value.Day
                                || calendarMonth.Month == Model.Settings.ScheduleEndDate.Value.Month && calendarMonth.Year == Model.Settings.ScheduleEndDate.Value.Year && date > Model.Settings.ScheduleEndDate.Value.Day);
                            var hideDate = date < 1 || date > daysInMonth;
                            var blackoutDate = Model.BlackoutDates.FirstOrDefault(_ => _.Date.Day == date && _.Date.Month == calendarMonth.Month && _.Date.Year == calendarMonth.Year);
                            var scheduleDate = Model.Performer.Schedule.FirstOrDefault(_ => _.Date.Day == date && _.Date.Month == calendarMonth.Month && _.Date.Year == calendarMonth.Year);
                            var bookedDate = Model.BookedDates.FirstOrDefault(_ => _.Day == date && _.Month == calendarMonth.Month && _.Year == calendarMonth.Year);
                            bool currentDate = Model.BranchSelection.RequestedStartTime.Year == calendarMonth.Year && Model.BranchSelection.RequestedStartTime.Month == calendarMonth.Month
                                && Model.BranchSelection.RequestedStartTime.Day == date;

                            if ((date + firstDayOfWeek) % 7 == 1)
                            {
                                @:<tr>
                                }
                                <td class="@(outOfRange || hideDate ? "unselectable" : "selectable")@(blackoutDate != null ? " blackout" : "")@(outOfRange ? " out-of-range" : "")" 
                                    data-year="@calendarMonth.Year" 
                                    data-month="@calendarMonth.Month" 
                                    data-date="@date"
                                    data-start="@(scheduleDate?.StartTime?.ToShortTimeString() ?? "8:00 AM")" 
                                    asp-schedule="@scheduleDate" 
                                    asp-booked="@bookedDate" 
                                    asp-booking="true" 
                                    asp-currentDate="@currentDate">
                                    <div class="option@(currentDate ? " selected-date" : "")"
                                        data-bs-toggle="tooltip"
                                        data-bs-placement="top"
                                        title="@blackoutDate?.Reason">
                                        @Html.Raw(hideDate ? "&nbsp;" : date.ToString())
                                    </div>
                                </td>
                                if ((date + firstDayOfWeek) % 7 == 0)
                                {
                                @:</tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            if (count % 3 == 2)
            {
                @Html.Raw("</div>");
            }
            { count++; }
        }
        @if (count % 3 != 0)
        {
            @Html.Raw("</div>");
        }
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div id="daySchedule">
            <ul>
                @if (!string.IsNullOrWhiteSpace(Model.DayScheduleModel.StartTime))
                {
                    @Html.Raw($"<li>Available: {Model.DayScheduleModel.StartTime}");
                }
                @for (int i = 0; i < Model.DayScheduleModel.BranchSelections.Count; i++)
                {
                    if (i != 0 || !string.IsNullOrWhiteSpace(Model.DayScheduleModel.StartTime))
                    {
                        @Html.Raw($"&ndash; {Model.DayScheduleModel.BranchSelections[i].ScheduleStartTime.ToLongTimeString()}</li>")
                    }
                    <li>Booked: @Model.DayScheduleModel.BranchSelections[i].ScheduleStartTime.ToLongTimeString() &ndash; @Model.DayScheduleModel.BranchSelections[i].ScheduleStartTime.AddMinutes(Model.DayScheduleModel.BranchSelections[i].ScheduleDuration).ToLongTimeString() @@ @Model.DayScheduleModel.BranchSelections[i].Branch.Name <a href="https://www.google.com/maps/search/@Model.DayScheduleModel.BranchSelections[i].Branch.Address" target="_blank"><span class="far fa-map"></span></a></li>
                    if (i != Model.DayScheduleModel.BranchSelections.Count - 1 || !string.IsNullOrWhiteSpace(Model.DayScheduleModel.EndTime))
                    {
                        @Html.Raw($"<li>Available: {Model.DayScheduleModel.BranchSelections[i].ScheduleStartTime.AddMinutes(Model.DayScheduleModel.BranchSelections[i].ScheduleDuration).ToLongTimeString()}")
                    }
                }
                @if (!string.IsNullOrWhiteSpace(Model.DayScheduleModel.EndTime))
                {
                    @Html.Raw($"&ndash; {Model.DayScheduleModel.EndTime}</li>");
                }
            </ul>
        </div>
        <div class="d-flex align-items-end">
            <div>                
                <div>New program start time</div>
                <div datetimepicker-container
                     id="startTimePicker">
                    <input id="startTime" datetimepicker-input type="text" />
                </div>
            </div>
            <div>       
                <div class="ms-4 me-2 d-none" id="programDurationLabel">
                    Updated full duration
                </div>
                <div id="programDuration" class="py-2 ms-4 me-2"></div>
            </div>
            <div>
                <button id="checkTime"
                        button-spinner
                        type="button"
                        class="btn btn-outline-primary ms-3" 
                        disabled="disabled">Check Availability</button>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12 col-lg-6">
                <div id="checkAlert" class="alert d-flex d-none align-items-center mb-0">
                    <div class="flex-grow-1" id="checkAlertText"></div>
                    <div>
                        <button id="scheduleProgram"
                                type="button"
                                class="btn btn-outline-success">Update start time</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var dayScheduleUrl = "@Url.Action(nameof(PerformerManagementController.GetPerformerDaySchedule))";
    var checkTimeUrl = "@Url.Action(nameof(PerformerManagementController.CheckProgramTimeAvailability))";
    var scheduleBranchProgramUrl = "@Url.Action(nameof(PerformerManagementController.EditBranchProgramSelection))";
    var backToBack = @Model.BranchSelection.BackToBackProgram.ToString().ToLower();
    var selectedDate = "@Model.BranchSelection.RequestedStartTime.ToString("yyyy-MM-dd")";
    var startTime = "@Model.DayScheduleModel.StartTime";
    var setupMinutes = @Model.BranchSelection.Program.SetupTimeMinutes;
    var lengthBreakdownMinutes = @Model.BranchSelection.Program.ProgramLengthMinutes + @Model.BranchSelection.Program.BreakdownTimeMinutes;
    var lengthBacktobackMinutes = @Model.BranchSelection.Program.ProgramLengthMinutes + @Model.BranchSelection.Program.BackToBackMinutes;

    $(".selectable").on("click", function () {
        $(".selected-date").removeClass("selected-date");
        $(this).children().addClass("selected-date");
        let month = String($(this).data("month")).padStart(2, '0');
        let date = String($(this).data("date")).padStart(2, '0');
        selectedDate = $(this).data("year") + "-" + month + "-" + date;
        startTime = $(this).data("start");
        $("#checkAlert").addClass("d-none");
        $.get(dayScheduleUrl, { performerId: "@Model.Performer.Id", date: selectedDate }, 
            function (response) {
                $("#daySchedule").html(response);
                $("#startTime").val('');
            });
    });

    var picker = graInitalizePickerTime(document.getElementById("startTimePicker"));
    picker.subscribe(tempusDominus.Namespace.events.change, (e) => {
        if (e.date != null) {
            $("#checkTime").prop("disabled", null);
            let scheduleStartTime = new Date(e.date.getTime() - 60000 * setupMinutes);
            let scheduleEndTime = new Date(e.date.getTime() + 60000 * lengthBreakdownMinutes);
            if (backToBack == true) {
                scheduleEndTime = new Date(scheduleEndTime.getTime() + 60000 * lengthBacktobackMinutes);
            }
            $("#programDuration").text(scheduleStartTime.toLocaleTimeString() + " – " + scheduleEndTime.toLocaleTimeString());
            $("#programDurationLabel").removeClass("d-none");
            LookupNewTime();
        }
        else {
            $("#checkTime").prop("disabled", true);
            $("#programDurationLabel").addClass("d-none");
            $("#programDuration").text();
        }
        $("#checkAlert").addClass("d-none");
    });

    function DisplayResult(cssClass, text) {
        let checkAlert = $("#checkAlert");
        checkAlert.removeClass("alert-warning alert-success alert-danger");
        if(cssClass) {
            checkAlert.addClass(cssClass).removeClass("d-none");
            $("#checkAlertText").text(text);
        }
    }

    function LookupNewTime() {
        $("#checkTime").find(".fa-spinner").removeClass("d-none")
        $("#scheduleProgram").addClass("d-none");
        let startDateTime = new Date(selectedDate + " " + $("#startTime").val());
        $.getJSON(checkTimeUrl, { selectionId: "@Model.BranchSelection.Id", 
            programId: "@Model.BranchSelection.ProgramId", 
            dateTime: startDateTime.toISOString(), 
            backToBack: backToBack }, 
            function (response) {
                if (response.success == true) {
                    if (response.message != null) {
                        DisplayResult("alert-warning", response.message);
                    }
                    else {
                        DisplayResult("alert-success", "The performer is available at that time.");
                        $("#scheduleProgram").removeClass("d-none");
                        $("#BranchSelection_RequestedStartTime").val(startDateTime);
                    }
                }
                else {
                    DisplayResult("alert-danger", response.message);
                    $("#BranchSelection_RequestedStartTime").val("");
                }
                $("#checkTime").find(".fa-spinner").addClass("d-none")
        });
    }

    $("#checkTime").on("click", LookupNewTime);

    $("#scheduleProgram").on("click", function () {
        let startDateTime = new Date(selectedDate + " " + $("#startTime").val());
        $.post(scheduleBranchProgramUrl, { 
            branchSelectionId: "@Model.BranchSelection.Id",
            requestedStartTime: startDateTime.toISOString()
            }, function (response) {
                if (response.success) {
                    window.location.href = "@Url.Action(nameof(PerformerManagementController.PerformerSelections), new { id = Model.Performer.Id})";
                }
                else {
                    $("#checkAlert").addClass("d-none");
                    alert(response.message);
                }
        });
    });
</script>